// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service.proto

package visitorpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VisitorClient is the client API for Visitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VisitorClient interface {
	AddVisitor(ctx context.Context, in *AddVisitorRequest, opts ...grpc.CallOption) (*AddVisitorReply, error)
	ListVisitorCount(ctx context.Context, in *ListVisitorCountRequest, opts ...grpc.CallOption) (*ListVisitorCountReply, error)
}

type visitorClient struct {
	cc *grpc.ClientConn
}

func NewVisitorClient(cc *grpc.ClientConn) VisitorClient {
	return &visitorClient{cc}
}

func (c *visitorClient) AddVisitor(ctx context.Context, in *AddVisitorRequest, opts ...grpc.CallOption) (*AddVisitorReply, error) {
	out := new(AddVisitorReply)
	err := c.cc.Invoke(ctx, "/visitorpb.visitor/AddVisitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitorClient) ListVisitorCount(ctx context.Context, in *ListVisitorCountRequest, opts ...grpc.CallOption) (*ListVisitorCountReply, error) {
	out := new(ListVisitorCountReply)
	err := c.cc.Invoke(ctx, "/visitorpb.visitor/ListVisitorCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VisitorServer is the server API for Visitor service.
type VisitorServer interface {
	AddVisitor(context.Context, *AddVisitorRequest) (*AddVisitorReply, error)
	ListVisitorCount(context.Context, *ListVisitorCountRequest) (*ListVisitorCountReply, error)
}

func RegisterVisitorServer(s *grpc.Server, srv VisitorServer) {
	s.RegisterService(&_Visitor_serviceDesc, srv)
}

func _Visitor_AddVisitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVisitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitorServer).AddVisitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/visitorpb.visitor/AddVisitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitorServer).AddVisitor(ctx, req.(*AddVisitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Visitor_ListVisitorCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVisitorCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitorServer).ListVisitorCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/visitorpb.visitor/ListVisitorCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitorServer).ListVisitorCount(ctx, req.(*ListVisitorCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Visitor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "visitorpb.visitor",
	HandlerType: (*VisitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddVisitor",
			Handler:    _Visitor_AddVisitor_Handler,
		},
		{
			MethodName: "ListVisitorCount",
			Handler:    _Visitor_ListVisitorCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_service_5903e2345ddcea0d) }

var fileDescriptor_service_5903e2345ddcea0d = []byte{
	// 168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2c, 0xcb, 0x2c, 0xce, 0x2c,
	0xc9, 0x2f, 0x2a, 0x48, 0x92, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf,
	0xd5, 0x4f, 0xcf, 0x4f, 0xcf, 0xd7, 0x07, 0xab, 0x48, 0x2a, 0x4d, 0x03, 0xf3, 0xc0, 0x1c, 0x30,
	0x0b, 0xa2, 0x53, 0x8a, 0x17, 0xaa, 0x13, 0xc2, 0x35, 0x5a, 0xcd, 0xc8, 0xc5, 0x0e, 0x15, 0x11,
	0x72, 0xe3, 0xe2, 0x72, 0x4c, 0x49, 0x09, 0x83, 0xf2, 0x64, 0xf4, 0xe0, 0x76, 0xe8, 0x21, 0x84,
	0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0xa4, 0xa4, 0x70, 0xc8, 0x16, 0xe4, 0x54, 0x0a, 0x45,
	0x70, 0x09, 0xf8, 0x64, 0x16, 0x97, 0x40, 0xc5, 0x9c, 0xf3, 0x4b, 0xf3, 0x4a, 0x84, 0x94, 0x90,
	0xd4, 0xa3, 0x4b, 0xc2, 0xcc, 0x54, 0xc0, 0xab, 0xa6, 0x20, 0xa7, 0xd2, 0x89, 0xff, 0xc7, 0x43,
	0x39, 0xc6, 0x28, 0x84, 0xe7, 0x93, 0xd8, 0xc0, 0xbe, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0xd0, 0x98, 0x3b, 0x0b, 0x1f, 0x01, 0x00, 0x00,
}
